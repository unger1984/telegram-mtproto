{"version":3,"sources":["../../../src/state/epic/task.js"],"names":["log","flatPairs","data","concat","map","n","list","receiveResponse","action","thru","RECEIVE_RESPONSE","stream","e","payload","normalized","summary","dc","uid","salt","saltKey","auth","authKey","thread","processAck","id","processMessageAck","ack","ackMessage","reqResend","pushResend","performResend","type","noResponseMsgs","cache","fastCache","get","sentDel","msgID","hasSent","msg","getSent","push","deleteSent","deferred","resolve","checkConnectionPeriod","Math","max","sqrt","checkLongPoll","result","obj","TASK","DONE","chainRej","err","NETWORK_ERROR","promise","filter","recoverWith","sentMessage","acked","body","ackMsgIDs","ACK_ADD","sheduleRequest","value","inner","setPending","hasResends","resendMsgIDs","getResends","wrapMtpMessage","_","msg_ids","noShedule","notContentRelated","lastResendReq","req_msg_id","msg_id","resend_msg_ids"],"mappings":"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","file":"task.js","sourcesContent":["//@flow\n\nimport { Stream, of } from 'most'\nimport { of as ofF } from 'fluture'\nimport { toPairs, contains } from 'ramda'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`epic-task`\n\nimport { API, NET } from '../action'\nimport normalize, { decrypt } from '../../task'\nimport jsonError from 'Util/json-error'\nimport {\n  queryAck,\n} from '../query'\nimport NetworkerThread from '../../service/networker'\nimport { dispatch } from '../portal'\nimport { tsNow } from '../../service/time-manager'\nimport { NetContainer } from '../../service/networker/net-message'\nimport Config from 'ConfigProvider'\n\nfunction flatPairs(data) {\n  return []\n    .concat(\n      ...toPairs(data)\n        .map(([n, list]) => list)\n    )\n\n}\n\nexport const receiveResponse = (action: Stream<any>) => action\n  .thru(NET.RECEIVE_RESPONSE.stream)\n  .map(e => e.payload)\n  .map(payload => decrypt(payload)\n    .map(normalize)\n    .map((data) => {\n      const {\n        normalized,\n        summary,\n        dc,\n        uid,\n        salt: saltKey,\n        auth: authKey,\n        thread,\n      } = data\n      // const { salt, auth } = summary\n      // const saltPairs = toPairs(salt)\n      // const authPairs = toPairs(auth)\n      // for (const [dc, value] of saltPairs) {\n      //   if (!Array.isArray(value)) {\n      //     await Config.storage.remove(uid, `dc${dc}_server_salt`)\n      //   } else {\n      //     await Config.storage.set(uid, `dc${dc}_server_salt`, value)\n      //   }\n      // }\n      // for (const [dc, value] of authPairs) {\n      //   if (!Array.isArray(value)) {\n      //     await Config.storage.remove(uid, `dc${dc}_auth_key`)\n      //   } else {\n      //     await Config.storage.set(uid, `dc${dc}_auth_key`, value)\n      //   }\n      // }\n\n      for (const id of flatPairs(summary.processAck)) {\n        processMessageAck(uid, dc, id)\n      }\n      for (const id of flatPairs(summary.ack)) {\n        ackMessage(uid, dc, id, thread)\n      }\n      for (const id of flatPairs(summary.reqResend)) {\n        pushResend(uid, dc, id, thread)\n      }\n      performResend(uid, dc, thread)\n\n      dispatch({\n        type   : '[01] action carrier',\n        payload: {\n          normalized, summary\n        }\n      }, uid)\n      if (__DEV__)\n        normalized.map(\n          msg => console.log(\n            'normalized, summary',\n            msg, `\\n`,\n            summary, `\\n`))\n      return {\n        ...data,\n        uid,\n        dc,\n        normalized,\n        summary,\n      }\n    })\n    .map(({ uid, dc, thread, noResponseMsgs, normalized }) => {\n      // await thread.requestPerformer(message, noResponseMsgs, result)\n      const cache = Config.fastCache.get(uid, dc)\n      // thread.toggleOffline(false)\n      const sentDel = []\n      for (const msgID of noResponseMsgs)\n        if (cache.hasSent(msgID)) {\n          const msg = cache.getSent(msgID)\n          sentDel.push(msg)\n          cache.deleteSent(msg)\n          msg.deferred.resolve()\n        }\n      // dispatch(NETWORKER_STATE.SENT.DEL(sentDel, thread.dcID))\n      thread.checkConnectionPeriod = Math.max(1.1, Math.sqrt(thread.checkConnectionPeriod))\n      thread.checkLongPoll()\n      const result = normalized.map(obj => ({ ...obj, uid }))\n      dispatch(API.TASK.DONE(result), uid)\n    })\n    .chainRej(err => ofF(dispatch(NET.NETWORK_ERROR(jsonError(err)), payload.uid)))\n    .promise()\n  )\n  .filter(() => false)\n  .recoverWith(err => of(NET.NETWORK_ERROR(jsonError(err))))\n\nfunction processMessageAck(uid, dc, msg: string) {\n  const cache = Config.fastCache.get(uid, dc)\n  const sentMessage = cache.getSent(msg)\n  if (sentMessage && !sentMessage.acked) { //TODO Warning, mutable changes!\n    delete sentMessage.body\n    sentMessage.acked = true\n  }\n}\n\nfunction ackMessage(uid, dc, msg: string, thread: NetworkerThread) {\n  const cache = Config.fastCache.get(uid, dc)\n  const ackMsgIDs = queryAck(uid, dc)\n  if (contains(msg, ackMsgIDs)) return\n  cache\n  dispatch(NET.ACK_ADD({ dc, ack: [msg] }), uid)\n  thread.sheduleRequest(30000)\n}\n\nfunction pushResend(uid, dc, msg: string, thread: NetworkerThread) {\n  const cache = Config.fastCache.get(uid, dc)\n  const value = tsNow()\n  const sentMessage = cache.getSent(msg)\n  if (sentMessage instanceof NetContainer) {\n    for (const msg of sentMessage.inner) {\n      cache.setPending(msg, value)\n    }\n  } else {\n    cache.setPending(msg, value)\n  }\n  thread.sheduleRequest(100)\n}\n\nfunction performResend(uid, dc, thread: NetworkerThread) {\n  const cache = Config.fastCache.get(uid, dc)\n  if (cache.hasResends()) {\n    const resendMsgIDs = [...cache.getResends()]\n    const resendOpts = { noShedule: true, notContentRelated: true }\n    const msg = thread.wrapMtpMessage({\n      _      : 'msg_resend_req',\n      msg_ids: resendMsgIDs\n    }, resendOpts)\n    thread.lastResendReq = {\n      req_msg_id    : msg.msg_id,\n      resend_msg_ids: resendMsgIDs,\n    }\n  }\n}\n"]}