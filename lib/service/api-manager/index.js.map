{"version":3,"sources":["../../../src/service/api-manager/index.js"],"names":["log","ApiManager","constructor","config","uid","online","server","api","app","storage","publicKeys","apiConfig","serverConfig","emitter","rootEmitter","on","emit","init","mtpInvokeApi","bind","invokeNetRequest","mtpGetNetworker","method","params","options","netReq","REQUEST","NEW","timestamp","Date","now","requestID","deferFinal","promise"],"mappings":";;;;;;;AAEA;;AACA;;AAEA;;AACA;;AAOA;;AACA;;;;AACA;;;;AACA;;AAEA;;AAEA;;AAEA;;;;;;AACA,IAAMA,MAAM,uBAAO,aAAnB;;AAGO,MAAMC,UAAN,CAAiB;AAStBC,cAAYC,MAAZ,EAAkCC,GAAlC,EAA4C;AAAA,SAD5CC,MAC4C,GAD1B,KAC0B;;AAC1C,QAAM;AACJC,YADI;AAEJC,SAFI;AAGJC,WAAK;AACHC,eADG;AAEHC;AAFG;AAHD,QAOFP,MAPJ;AAQA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKO,SAAL,GAAiBJ,GAAjB;AACA,SAAKG,UAAL,GAAkBA,UAAlB;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKG,YAAL,GAAoBN,MAApB;AACA,QAAMO,UAAU,yBAAOC,WAAP,CAAmB,KAAKV,GAAxB,CAAhB;AACA,SAAKW,EAAL,GAAUF,QAAQE,EAAlB;AACA,SAAKC,IAAL,GAAYH,QAAQG,IAApB;;AAEA,6BAAON,UAAP,CAAkBO,IAAlB,CAAuBb,GAAvB,EAA4BM,UAA5B;AACA;AACA,SAAKQ,YAAL,GAAoB,KAAKA,YAAL,CAAkBC,IAAlB,CAAuB,IAAvB,CAApB;AACA;AACA,SAAKC,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBD,IAAtB,CAA2B,IAA3B,CAAxB;AACD;AACDE,oBAAkB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;;;;;;;;;;AAaA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;;;;AAOD;;AAEDH,eAAaI,MAAb,EAA6BC,SAAiB,EAA9C,EAAkDC,UAAuB,EAAzE,EAA2F;AACzF,QAAMC,SAAS,sBACb,EAAEH,MAAF,EAAUC,MAAV,EADa,EAEbC,OAFa,EAGb,KAAKpB,GAHQ,CAAf;;AAKA,yBAAS,YAAIsB,OAAJ,CAAYC,GAAZ,CAAgB;AACvBF,YADuB;AAEvBH,YAFuB;AAGvBC,YAHuB;AAIvBK,iBAAWC,KAAKC,GAAL;AAJY,KAAhB,EAKNL,OAAOM,SALD,CAAT,EAKsB,KAAK3B,GAL3B;AAMA,WAAOqB,OAAOO,UAAP,CAAkBC,OAAzB;AACD;;AAEDb,mBAAiBK,MAAjB,EAAqC;AACnC,WAAO,6BAAgBA,MAAhB,EAAwBQ,OAAxB,EAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACD;AAzGqB;;QAAXhC,U,GAAAA,U","file":"index.js","sourcesContent":["//@flow\n\nimport { type Emit, type On } from 'eventemitter2'\nimport { type AsyncStorage } from 'mtproto-shared'\n\nimport { type Bytes, type LeftOptions } from './index.h'\nimport {\n  type PublicKey,\n  type ApiConfig,\n  type StrictConfig,\n  type ServerConfig,\n} from '../main/index.h'\n\nimport { type UID } from 'Newtype'\nimport Config from 'ConfigProvider'\nimport ApiRequest from '../main/request'\nimport { API } from 'Action'\n\nimport { dispatch } from 'State'\n\nimport { makeAuthRequest } from '../invoke'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`api-manager`\n\n\nexport class ApiManager {\n  uid: UID\n  apiConfig: ApiConfig\n  publicKeys: PublicKey[]\n  storage: AsyncStorage\n  serverConfig: ServerConfig\n  on: On\n  emit: Emit\n  online: boolean = false\n  constructor(config: StrictConfig, uid: UID) {\n    const {\n      server,\n      api,\n      app: {\n        storage,\n        publicKeys\n      }\n    } = config\n    this.uid = uid\n    this.apiConfig = api\n    this.publicKeys = publicKeys\n    this.storage = storage\n    this.serverConfig = server\n    const emitter = Config.rootEmitter(this.uid)\n    this.on = emitter.on\n    this.emit = emitter.emit\n\n    Config.publicKeys.init(uid, publicKeys)\n    //$FlowIssue\n    this.mtpInvokeApi = this.mtpInvokeApi.bind(this)\n    //$off\n    this.invokeNetRequest = this.invokeNetRequest.bind(this)\n  }\n  mtpGetNetworker() {\n    // const uid = this.uid\n    // return MaybeT\n    //   .toFuture(\n    //     ERR.noDC,\n    //     queryHomeDc(uid)\n    //   )\n    //   .chain(dc => getThread(uid, dc))\n\n    // return FutureT.futureEither(checkedDC)\n\n    /*\n    const cache = this.cache\n    if (cache[dc]) return cache[dc]\n\n    const qAuthKey = queryAuthKey(dc)\n    const qSalt = querySalt(dc)\n    if (Array.isArray(qAuthKey) && Array.isArray(qSalt)) {\n      return new Thread(\n        dc, authKey, serverSalt, uid\n      )\n    } */\n\n\n    // const authKeyHex: string = await this.storage.get(akk)\n    // let serverSaltHex: string = await this.storage.get(ssk)\n\n    // const haveAuthKey =\n    //   authKeyHex != null\n    //   && typeof authKeyHex.length === 'number'\n    //   && authKeyHex.length === 512\n    // if (haveAuthKey) {\n    //   if (!serverSaltHex || serverSaltHex.length !== 16)\n    //     serverSaltHex = 'AAAAAAAAAAAAAAAA'\n    //   const authKey = bytesFromHex(authKeyHex)\n    //   const serverSalt = bytesFromHex(serverSaltHex)\n\n    //   return this.networkSetter(dc, authKey, serverSalt)\n    // }\n\n    /* const auth = await authRequest(uid, dc).promise()\n\n    const { authKey, serverSalt } = auth\n\n    return new Thread(\n      dc, authKey, serverSalt, uid\n    ) */\n  }\n\n  mtpInvokeApi(method: string, params: Object = {}, options: LeftOptions = {}): Promise<any> {\n    const netReq = new ApiRequest(\n      { method, params },\n      options,\n      this.uid)\n\n    dispatch(API.REQUEST.NEW({\n      netReq,\n      method,\n      params,\n      timestamp: Date.now(),\n    }, netReq.requestID), this.uid)\n    return netReq.deferFinal.promise\n  }\n\n  invokeNetRequest(netReq: ApiRequest) {\n    return makeAuthRequest(netReq).promise()\n    // try {\n    //   const resultDeffered = await makeAuthRequest(this.uid, netReq).promise()\n    //   console.warn('resultDeffered', resultDeffered)\n    // } finally {\n    //   return netReq.defer.promise\n    // }\n  }\n}\n\ndeclare class NoDCError extends Error {  }\ndeclare class NoThreadError extends Error {  }\ndeclare var typedError: <E, /*:: -*/F>(ErrorClass: Class<E>, x: F) => E\n"]}