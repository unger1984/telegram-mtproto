{"version":3,"sources":["../../../src/service/main/index.js"],"names":["log","MTProto","constructor","config","emitter","wildcard","on","bind","emit","defaultDC","activated","uid","fullConfig","dcMap","storage","layer","rootEmitter","schema","apiSchema","mtSchema","apiConfig","api","data","rest","length","bus","INIT","load","setTimeout"],"mappings":";;;;;;AAEA;;;;AAKA;;AAEA;;AACA;;AACA;;AAEA;;;;AAGA;;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AACA;;;;;;AATA,IAAMA,MAAM,uBAAO,MAAnB;;AAWA,MAAMC,OAAN,CAAc;AAUZ;AAKAC,cAAYC,MAAZ,EAAgC;AAAA;;AAAA,SAZhCC,OAYgC,GAZW,2BAAiB;AAC1DC,gBAAU;AADgD,KAAjB,CAYX;AAAA,SARhCC,EAQgC,GARvB,KAAKF,OAAL,CAAaE,EAAb,CAAgBC,IAAhB,CAAqB,KAAKH,OAA1B,CAQuB;AAAA,SAPhCI,IAOgC,GAPnB,KAAKJ,OAAL,CAAaI,IAAb,CAAkBD,IAAlB,CAAuB,KAAKH,OAA5B,CAOmB;AAAA,SAJhCK,SAIgC,GAJZ,CAIY;AAAA,SADhCC,SACgC,GADX,IACW;;AAC9B,oBAAQF,IAAR,CAAa,SAAb;AACA,QAAM;AACJG,SADI;AAEJC,gBAFI;AAGJC,WAHI;AAIJC,aAJI;AAKJC;AALI,QAMF,gBAAKZ,MAAL,CANJ;AAOA,SAAKA,MAAL,GAAcS,UAAd;AACA,SAAKD,GAAL,GAAWA,GAAX;AACA,0CAAiB;AACfA,SADe;AAEfH,YAAa,KAAKA,IAFH;AAGfQ,mBAAa,0BAAcL,GAAd,EAAmB,KAAKP,OAAxB,CAHE;AAIfa,cAAa;AACXC,mBAAWN,WAAWK,MADX;AAEXE,kBAAWP,WAAWO;AAFX,OAJE;AAQfC,iBAAWR,WAAWS,GARP;AASfP,aATe;AAUfC,WAVe;AAWfF;AAXe,KAAjB;AAaA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKV,OAAL,CAAaE,EAAb,CAAgB,GAAhB,EAAqB,CAACgB,IAAD,EAAO,GAAGC,IAAV,KAAmB;AACtCvB,UAAI,OAAJ,EAAasB,IAAb;AACA,UAAIC,KAAKC,MAAL,GAAc,CAAlB,EACExB,IAAI,OAAJ,EAAa,MAAb,EAAqBuB,IAArB;AACH,KAJD;AAKA,SAAKnB,OAAL,CAAaE,EAAb,CAAgB,YAAhB,EAA8B,MAAM;AAClC,WAAKI,SAAL,GAAiB,KAAjB;AACD,KAFD;AAGA,SAAKW,GAAL,GAAW,2BAAeT,UAAf,EAA2BD,GAA3B,CAAX;AACA,SAAKc,GAAL,GAAW,yBAAU,IAAV,CAAX;AACA,yBAAS,WAAKC,IAAL,CAAU;AACjBf;AADiB,KAAV,CAAT,EAEIA,GAFJ;AAGA,QAAMgB;AAAA,mCAAO,aAAW;AACtB,YAAI,MAAKjB,SAAT,EACE,MAAM,2BAAYG,KAAZ,EAAmBF,GAAnB,CAAN;AACH,OAHK;;AAAA;AAAA;AAAA;AAAA,QAAN;AAIA,SAAKgB,IAAL,GAAYA,IAAZ;AACAC,eAAWD,IAAX,EAAiB,GAAjB;AACD;AA3DW;;kBA8DC1B,O","file":"index.js","sourcesContent":["//@flow\n\nimport EventEmitter, {\n  type EventEmitterType,\n  type Emit,\n  type On,\n} from 'eventemitter2'\nimport { type AsyncStorage } from 'mtproto-shared'\n\nimport { ApiManager } from '../api-manager'\nimport { registerInstance } from 'ConfigProvider'\nimport { type UID } from 'Newtype'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`main`\n\nimport streamBus, { type Bus } from '../../event/stream-bus'\nimport { scopedEmitter } from '../../event'\nimport { type ConfigType, type StrictConfig } from './index.h'\nimport { dispatch } from 'State'\nimport { emitter } from '../../state/portal'\nimport { MAIN } from 'Action/main'\nimport loadStorage from './load-storage'\nimport { init } from './init'\n\nclass MTProto {\n  config: StrictConfig\n  uid: UID\n  emitter: EventEmitterType & EventEmitter = new EventEmitter({\n    wildcard: true\n  })\n  api: ApiManager\n  on: On = this.emitter.on.bind(this.emitter)\n  emit: Emit = this.emitter.emit.bind(this.emitter)\n  storage: AsyncStorage\n  // state = new State\n  defaultDC: number = 2\n  bus: Bus\n  load: () => Promise<void>\n  activated: boolean = true\n  constructor(config: ConfigType) {\n    emitter.emit('cleanup')\n    const {\n      uid,\n      fullConfig,\n      dcMap,\n      storage,\n      layer,\n    } = init(config)\n    this.config = fullConfig\n    this.uid = uid\n    registerInstance({\n      uid,\n      emit       : this.emit,\n      rootEmitter: scopedEmitter(uid, this.emitter),\n      schema     : {\n        apiSchema: fullConfig.schema,\n        mtSchema : fullConfig.mtSchema\n      },\n      apiConfig: fullConfig.api,\n      storage,\n      layer,\n      dcMap\n    })\n    this.storage = storage\n    this.emitter.on('*', (data, ...rest) => {\n      log('event')(data)\n      if (rest.length > 0)\n        log('event', 'rest')(rest)\n    })\n    this.emitter.on('deactivate', () => {\n      this.activated = false\n    })\n    this.api = new ApiManager(fullConfig, uid)\n    this.bus = streamBus(this)\n    dispatch(MAIN.INIT({\n      uid,\n    }), uid)\n    const load = async() => {\n      if (this.activated)\n        await loadStorage(dcMap, uid)\n    }\n    this.load = load\n    setTimeout(load, 1e3)\n  }\n}\n\nexport default MTProto\n\nexport type { MTProto }\n"]}