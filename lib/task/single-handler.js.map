{"version":3,"sources":["../../src/task/single-handler.js"],"names":["singleHandler","log","writer","state","facade","Object","defineProperties","next","set","x","read","value","getFlags","e","flags","selector","select","noEmpty","ctx","message","patches","result","inner","handleInner","isUnrelatedBody","unrel","handleUnrelated","error","info","patch","handleError","collected","summary","makeSummary","api","container","body","processAckChain","processAck","ackChain","ack","homeChain","home","authChain","authKey","reqResendChain","reqResend","resendChain","resend","lastMessagesChain","lastServerMessages","saltChain","salt","sessionChain","session","auth","lastMessages","thread","uid","dc","cast","id","_","msg_ids","forEach","processMessageAck","net","map","msg","fastCache","get","hasSent","msg_id","ackMessage","answer_msg_id","emptyPatch","lastResendReq","req_msg_id","resend_msg_ids","badMsgID","deleteResent","aId","handleRpcResult","handleNewSession","handleBadSalt","handleBadNotify","emit","threadID","networkerDC","messageID","sessionID","indexOf","push","length","shift","migrateRegexp","fileMigrateRegexp","floodWaitRegexp","data","err","code","test","handleFloodWait","handleFileMigrate","handleMigrateError","handleAuthUnreg","handleAuthRestart","floodWarning","isIssue","matched","match","newDcID","isFinite","waitTime","parseInt","handled","newDc","methodResult","outID","req","fold","RECOVERY_MODE","halt","recovery","init","seq","Promise","all","storageAdapter","nearestDC","then","DC_DETECTED","AUTH_UNREG","first_msg_id","server_salt","first","bad_msg_id","badMsg","bad_msg_seqno","error_code","sentMessage","getSent","errorPrint","description","seq_no","Array","badMessage","updateSentMessage","ck","new_server_salt","newSalt","pushResend","sentMessageID","console","warn","SENT","DEL","deleteSent","isAPI","connectionInited"],"mappings":"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","file":"single-handler.js","sourcesContent":["//@flow\n\nimport { append, reject, isEmpty, chain, filter, pipe } from 'ramda'\n\nimport { Just } from 'folktale/maybe'\n\nimport {\n  type IncomingType,\n  type SystemMessage,\n  type MessageUnit,\n\n\n  type ᐸPatchᐳProcessAck,\n  type ᐸPatchᐳAck,\n  type ᐸPatchᐳHome,\n  type ᐸPatchᐳAuthKey,\n  type ᐸPatchᐳReqResend,\n  type ᐸPatchᐳResend,\n  type ᐸPatchᐳLastMesages,\n  type ᐸPatchᐳSalt,\n  type ᐸPatchᐳSession,\n\n  type ᐸPatchᐳSummary,\n} from './index.h'\nimport { dispatch } from 'State'\nimport describeProtocolError from './describe-protocol-error'\nimport { MAIN, NETWORKER_STATE } from 'Action'\nimport { longToBytes, rshift32 } from 'Bin'\nimport guard from 'Util/match-spec'\nimport warning from 'Util/warning'\nimport random from '../service/secure-random'\nimport { toDCNumber } from 'Newtype'\nimport {\n  type ᐸMTᐳNewSessionCreated,\n  type ᐸMTᐳBadSalt,\n  type ᐸMTᐳBadNotification,\n  type ᐸMTᐳRpcResult,\n} from 'Mtp'\nimport { queryRequest } from '../state/query'\nimport Logger from 'mtproto-logger'\nimport { applyServerTime } from '../service/time-manager'\nimport { NetMessage } from '../service/networker/net-message'\nimport Config from 'ConfigProvider'\nconst log = Logger`single-handler`\n\n/*::\ninterface Writer<T> {\n  set next(x: T): void,\n  read(): T[],\n}\n*/\nfunction writer<T>(): Writer<T> {\n  let state: Array<T> = []\n\n  const facade = {}\n  //$off\n  Object.defineProperties(facade, {\n    next: {\n      set(x: T) {\n        state = append(x, state)\n      }\n    },\n    read: {\n      value: () => state\n    }\n  })\n  return facade\n}\n\ntype Selector = <A, B>(\n  check: (((x: Flags) => ?true) & ((x: A) => B[]))\n) => (x: A) => B[]\n\nconst getFlags = (e): Flags => e.flags\n\nconst selector: Selector = (select) => pipe(\n  filter(pipe(getFlags, select, e => !!e)),\n  chain(select)\n)\n\nconst noEmpty = reject(isEmpty)\n\nexport default function singleHandler(\n  ctx: IncomingType,\n  message: MessageUnit\n): {\n  message: MessageUnit,\n  summary: ᐸPatchᐳSummary,\n} {\n  const { flags } = message\n  const patches: Writer<*> = writer()\n  let result = message\n  if (flags.inner) {\n    patches.next = handleInner(ctx, message)\n  }\n  if (isUnrelatedBody(flags)) {\n    const unrel = handleUnrelated(ctx, message)\n    if (unrel !== void 0)\n      patches.next = unrel\n  }\n  if (flags.error) {\n    const { info, patch } = handleError(ctx, message)\n    patches.next = patch\n\n    result = info\n  }\n\n  const collected = patches.read()\n  // .map(({ flags, ...e }) => ({\n  //   flags: {\n  //     ...emptyPatch().flags,\n  //     ...flags,\n  //   },\n  //   ...e\n  // }))\n\n  // collected.forEach(e => log`patches`(e))\n  const summary = makeSummary(collected)\n  //$off\n  log`summary`(noEmpty(summary))\n  return {\n    message: result,\n    summary,\n  }\n}\n\nconst isUnrelatedBody = guard({\n  api      : false,\n  container: false,\n  body     : true,\n})\n\ntype Flags = {\n  +net?: true,\n  +processAck?: true,\n  +ack?: true,\n  +home?: true,\n  +authKey?: true,\n  +reqResend?: true,\n  +resend?: true, // as pushResend\n  +lastServerMessages?: true,\n  +salt?: true,\n  +session?: true,\n}\n\n//$off\nconst processAckChain = selector(e => e.processAck)\n//$off\nconst ackChain = selector(e => e.ack)\n//$off\nconst homeChain = selector(e => e.home)\n//$off\nconst authChain = selector(e => e.authKey)\n//$off\nconst reqResendChain = selector(e => e.reqResend)\n//$off\nconst resendChain = selector(e => e.resend)\n//$off\nconst lastMessagesChain = selector(e => e.lastServerMessages)\n//$off\nconst saltChain = selector(e => e.salt)\n//$off\nconst sessionChain = selector(e => e.session)\n\n\n\nfunction makeSummary(collected): ᐸPatchᐳSummary {\n  const processAck: ᐸPatchᐳProcessAck[] = processAckChain(collected)\n  const ack: ᐸPatchᐳAck[] = ackChain(collected)\n  const home: ᐸPatchᐳHome[] = homeChain(collected)\n  const auth: ᐸPatchᐳAuthKey[] = authChain(collected)\n  const reqResend: ᐸPatchᐳReqResend[] = reqResendChain(collected)\n  const resend: ᐸPatchᐳResend[] = resendChain(collected)\n  const lastMessages: ᐸPatchᐳLastMesages[] = lastMessagesChain(collected)\n  const salt: ᐸPatchᐳSalt[] = saltChain(collected)\n  const session: ᐸPatchᐳSession[] = sessionChain(collected)\n\n  const result = {\n    processAck,\n    ack,\n    home,\n    auth,\n    reqResend,\n    resend,\n    lastMessages,\n    salt,\n    session,\n  }\n\n  return result\n}\n\nfunction handleUnrelated(ctx: IncomingType, message: MessageUnit) {\n  const { thread, uid, dc } = ctx\n  //$off\n  const cast: typeof message & { body: SystemMessage } = message\n  const { body } = cast\n  const { id } = cast\n\n  switch (body._) {\n    case 'msgs_ack': {\n      body.msg_ids.forEach(thread.processMessageAck)\n      const msg_ids: string[] = body.msg_ids\n      return {\n        flags: {\n          net       : true,\n          processAck: true,\n        },\n        net: [{\n          dc,\n          processAck: msg_ids,\n        }],\n        processAck: msg_ids.map(msg => ({ dc, id: msg }))\n      }\n    }\n    case 'msg_detailed_info': {\n      if (!Config.fastCache.get(uid, dc).hasSent(body.msg_id)) {\n        thread.ackMessage(body.answer_msg_id)\n        const id: string = body.answer_msg_id\n        return {\n          flags: {\n            net: true,\n            ack: true,\n          },\n          net: [{\n            dc,\n            ack: [id],\n          }],\n          ack: [{ dc, id }]\n        }\n      }\n      return emptyPatch()\n    }\n    case 'msg_new_detailed_info': {\n      const { answer_msg_id: id } = body\n      // thread.ackMessage(id)\n      // thread.reqResendMessage(id)\n      return {\n        flags: {\n          net      : true,\n          ack      : true,\n          reqResend: true,\n        },\n        net: [{\n          dc,\n          ack      : [id],\n          reqResend: [id],\n        }],\n        ack      : [{ dc, id }],\n        reqResend: [{ dc, id }],\n      }\n    }\n    case 'msgs_state_info': {\n      const { answer_msg_id } = body\n      // thread.ackMessage(answer_msg_id)\n      const lastResendReq = thread.lastResendReq\n      if (!lastResendReq) break\n      if (lastResendReq.req_msg_id != body.req_msg_id) break\n      // const resendDel = []\n      for (const badMsgID of lastResendReq.resend_msg_ids) {\n        // resendDel.push(badMsgID)\n        Config.fastCache.get(uid, dc).deleteResent(badMsgID)\n      }\n      const aId: string = answer_msg_id\n      return {\n        flags: {\n          net: true,\n          ack: true,\n        },\n        net: [{\n          dc,\n          ack: [aId],\n        }],\n        ack: [{ dc, id: aId }]\n      }\n      // dispatch(NETWORKER_STATE.RESEND.DEL(resendDel, this.dcID))\n    }\n    case 'rpc_result': {\n      return handleRpcResult(ctx, message)\n    }\n    case 'new_session_created': {\n      // thread.emit('new-session', {\n      //   threadID   : thread.threadID,\n      //   networkerDC: message.dc,\n      //   messageID  : message.id,\n      //   message    : body\n      // })\n      return handleNewSession(ctx, message)\n    }\n    case 'bad_server_salt': {\n      return handleBadSalt(ctx, message)\n    }\n    case 'bad_msg_notification': {\n      return handleBadNotify(ctx, message)\n    }\n    default: {\n      const { id } = message\n      thread.ackMessage(message.id)\n      thread.emit('untyped-message', {\n        threadID   : thread.threadID,\n        networkerDC: message.dc,\n        message    : body,\n        messageID  : message.id,\n        sessionID  : Config.session.get(ctx.thread.uid, message.dc),\n        result     : message,\n      })\n      return {\n        flags: {\n          net: true,\n          ack: true,\n        },\n        net: [{\n          dc,\n          ack: [id],\n        }],\n        ack: [{ dc, id }]\n      }\n    }\n  }\n}\n\nfunction handleInner(ctx: IncomingType, message: MessageUnit) {\n  const { thread } = ctx\n  const { id, dc } = message\n  if (thread.lastServerMessages.indexOf(id) != -1) {\n    // console.warn('[MT] Server same messageID: ', messageID)\n    // thread.ackMessage(id)\n    return {\n      flags: {\n        net: true,\n        ack: true,\n      },\n      net: [{\n        dc,\n        ack: [id],\n      }],\n      ack: [{ dc, id }]\n    }\n  } else {\n    thread.lastServerMessages.push(id)\n    if (thread.lastServerMessages.length > 100) {\n      thread.lastServerMessages.shift()\n    }\n    return {\n      flags: {\n        net               : true,\n        lastServerMessages: true,\n      },\n      net: [{\n        dc,\n        lastServerMessages: [id],\n      }],\n      lastServerMessages: [{ dc, id }]\n    }\n  }\n}\n\nconst migrateRegexp = /^(PHONE_MIGRATE_|NETWORK_MIGRATE_|USER_MIGRATE_)(\\d+)/\nconst fileMigrateRegexp = /^(FILE_MIGRATE_)(\\d+)/\nconst floodWaitRegexp = /^(FLOOD_WAIT_)(\\d+)/\n\nfunction handleError(ctx: IncomingType, data: MessageUnit) {\n  const err: {\n    code: number,\n    message: string,\n    handled: boolean,\n  //$off\n  } = data.error\n  const {\n    code,\n    message,\n  } = err\n  if (floodWaitRegexp.test(message)) {\n    return handleFloodWait(message, data, code, ctx)\n  } else if (fileMigrateRegexp.test(message)) {\n    return handleFileMigrate(message, data, code, ctx)\n  } else if (migrateRegexp.test(message)) {\n    return handleMigrateError(message, data, code, ctx)\n  } else {\n    switch (message) {\n      case 'AUTH_KEY_UNREGISTERED': return handleAuthUnreg(ctx, message, data, code)\n      case 'AUTH_RESTART': return handleAuthRestart(message, data, code, )\n    }\n\n  }\n  return { info: data, patch: emptyPatch() }\n}\n\nconst floodWarning = warning({\n  isIssue: false,\n  message: ['Flood wait! Too many requests, you should wait', 'seconds before new requests']\n})\n\nfunction handleFloodWait(message, data, code, ctx) {\n  const matched = message.match(floodWaitRegexp)\n  if (!matched || matched.length < 2)\n    return { info: data, patch: emptyPatch() }\n  const [ , , newDcID] = matched\n  if (!isFinite(newDcID))\n    return { info: data, patch: emptyPatch() }\n  const waitTime = parseInt(newDcID, 10)\n\n  floodWarning(waitTime)\n  const info = {\n    ...data,\n    error: {\n      code,\n      message,\n      handled: true\n    }\n  }\n  return { info, patch: emptyPatch() }\n}\n\nfunction handleFileMigrate(message, data, code, ctx) {\n  const { uid, dc } = ctx\n  const matched = message.match(fileMigrateRegexp)\n  if (!matched || matched.length < 2)\n    return { info: data, patch: emptyPatch() }\n  const [ , , newDcID] = matched\n  if (!isFinite(newDcID))\n    return { info: data, patch: emptyPatch() }\n  const newDc = /*:: toDCNumber( */ parseInt(newDcID, 10) /*:: ) */\n  if (data.flags.methodResult) {\n    const { outID } = data.methodResult\n    const req = queryRequest(uid, dc, outID)\n      .fold(() => false, x => x)\n    if (req) {\n      req.dc = Just(newDc)\n      const info = {\n        ...data,\n        error: {\n          code,\n          message,\n          handled: true\n        }\n      }\n      return { info, patch: emptyPatch() }\n    }\n  }\n  return { info: data, patch: emptyPatch() }\n}\n\nfunction handleMigrateError(message, data, code, ctx) {\n  const uid = ctx.uid\n\n  const matched = message.match(migrateRegexp)\n  if (!matched || matched.length < 2)\n    return { info: data, patch: emptyPatch() }\n  const [ , , newDcID] = matched\n  if (!isFinite(newDcID))\n    return { info: data, patch: emptyPatch() }\n  const newDc = parseInt(newDcID, 10)\n  dispatch(MAIN.RECOVERY_MODE({\n    halt: data.dc,\n    recovery: newDc,\n    uid,\n  }), uid)\n  Config.fastCache.init(uid, ctx.dc)\n  Config.seq.set(uid, ctx.dc, 0)\n  Config.halt.set(uid, ctx.dc, true)\n  Config.halt.set(uid, newDc, false)\n  //$off\n  Config.session.set(uid, ctx.dc, null)\n  Promise.all([\n    Config.storageAdapter.set.dc(uid, newDc),\n    Config.storageAdapter.set.nearestDC(uid,  newDc)\n  ]).then(() => {\n    dispatch(MAIN.DC_DETECTED({\n      dc: newDc,\n      uid,\n    }, newDc), uid)\n  })\n  const patch = {\n    flags: {\n      net : true,\n      home: true,\n    },\n    net: [{\n      dc  : data.dc,\n      home: false,\n    }, {\n      dc  : newDc,\n      home: true,\n    }],\n    home: [newDc],\n  }\n  const info = {\n    ...data,\n    error: {\n      code,\n      message,\n      handled: true\n    }\n  }\n  return { info, patch }\n}\n\nfunction handleAuthRestart(message, data, code) {\n  const { dc } = data\n  // dispatch(MAIN.AUTH_UNREG(dc))\n  const patch = {\n    flags: {\n      net    : true,\n      authKey: true,\n    },\n    net: [{\n      dc,\n      authKey: [],\n    }],\n    authKey: [{\n      dc,\n      authKey: false,\n    }]\n  }\n  const info = {\n    ...data,\n    error: {\n      code,\n      message,\n      handled: true\n    }\n  }\n  return { info, patch }\n}\n\nfunction handleAuthUnreg(ctx: IncomingType, message, data, code) {\n  const { dc, uid } = ctx\n  dispatch(MAIN.AUTH_UNREG(dc), uid)\n  const patch = {\n    flags: {\n      net    : true,\n      authKey: true,\n    },\n    net: [{\n      dc,\n      authKey: [],\n    }],\n    authKey: [{\n      dc,\n      authKey: false,\n    }]\n  }\n  const info = {\n    ...data,\n    error: {\n      code,\n      message,\n      handled: true\n    }\n  }\n  return { info, patch }\n}\n\nconst emptyPatch = () => ({\n  flags: {\n    /*:: net: true, */\n  }\n})\n\nfunction handleNewSession(ctx: IncomingType, message: MessageUnit) {\n  const body: ᐸMTᐳNewSessionCreated = message.body\n  const { first_msg_id, server_salt } = body\n  const salt = longToBytes(server_salt)\n  const { dc, id } = message\n  // const session = new Array(8)\n  // random(session)\n  // Config.seq.set(ctx.thread.uid, dc, 0)\n  return {\n    flags: {\n      net       : true,\n      // session   : true,\n      salt      : true,\n      ack       : true,\n      processAck: true,\n    },\n    net: [{\n      dc,\n      salt,\n      // session,\n      seq  : 0,\n      first: first_msg_id, // Refers to outcoming api message\n    }],\n    // session: [{\n    //   dc,\n    //   session,\n    //   seq  : 0,\n    //   first: first_msg_id,\n    // }],\n    salt: [{\n      dc,\n      salt\n    }],\n    ack       : [{ dc, id }],\n    processAck: [{ dc, id: first_msg_id }],\n  }\n}\n\nfunction handleBadNotify(ctx: IncomingType, message: MessageUnit) {\n  const body: ᐸMTᐳBadNotification = message.body\n  const { dc, uid } = ctx\n  log`Bad msg notification`(message)\n  const {\n    bad_msg_id: badMsg,\n    bad_msg_seqno: seq,\n    error_code: code,\n  } = body\n  const sentMessage = Config.fastCache.get(uid, dc).getSent(badMsg)\n  const error = describeProtocolError(code || 0)\n  errorPrint: {\n    log`protocol error, code`(error.code)\n    log`protocol error, message`(error.message)\n    log`protocol error, description`(error.description)\n  }\n  if (!sentMessage || sentMessage.seq_no != seq) {\n    log`Bad msg notification, seq`(badMsg, seq)\n    // throw error\n  }\n  const { id } = message\n\n  let flags = { /*:: ack: true */ }\n\n  let data = {}\n\n  if (code === 16 || code === 17) {\n    if (applyServerTime(\n      ctx.thread.uid,\n      rshift32(id)\n    )) {\n\n      const session = new Array(8)\n      random(session)\n      flags = { ...flags, session: true }\n      data = {\n        ...data,\n        session: [{\n          dc,\n          session,\n          seq  : 0,\n          first: badMsg,\n        }],\n      }\n      const badMessage = ctx.thread.updateSentMessage(badMsg)\n      if (badMessage instanceof NetMessage) {\n        flags = { ...flags, resend: true }\n        data = {\n          ...data,\n          resend: [{ dc, id: badMsg }]\n        }\n      }\n      flags = { ...flags, ack: true }\n      data = {\n        ...data,\n        ck: [{ dc, id }],\n      }\n    }\n  }\n  return {\n    ...data,\n    flags,\n  }\n}\n\nfunction handleBadSalt(ctx: IncomingType, message: MessageUnit) {\n  const body: ᐸMTᐳBadSalt = message.body\n  log`Bad server salt`(message)\n  const {\n    bad_msg_id: badMsg,\n    bad_msg_seqno: seq,\n    error_code: code,\n    new_server_salt: newSalt,\n  } = body\n  const { dc, uid } = ctx\n  const sentMessage = Config.fastCache.get(uid, dc).getSent(badMsg)\n  const error = describeProtocolError(code || 0)\n  errorPrint: {\n    log`protocol error, code`(error.code)\n    log`protocol error, message`(error.message)\n    log`protocol error, description`(error.description)\n  }\n  if (!sentMessage || sentMessage.seq_no != seq) {\n    log`invalid message, seq`(badMsg, seq)\n    // throw error\n  }\n  const salt = longToBytes(newSalt)\n  const { id } = message\n  const session = new Array(8)\n  random(session)\n\n  ctx.thread.pushResend(badMsg)\n  return {\n    flags: {\n      net    : true,\n      session: true,\n      salt   : true,\n      ack    : true,\n      resend : true,\n    },\n    net: [{\n      dc,\n      salt,\n      session,\n      seq  : 0,\n      first: badMsg,\n    }],\n    session: [{\n      dc,\n      session,\n      seq  : 0,\n      first: badMsg,\n    }],\n    salt: [{\n      dc,\n      salt\n    }],\n    ack   : [{ dc, id }],\n    resend: [{ dc, id: badMsg }]\n  }\n}\n\nfunction handleRpcResult(ctx: IncomingType, message: MessageUnit) {\n  const { thread, dc, uid } = ctx\n  const { id } = message\n  const body: ᐸMTᐳRpcResult = message.body\n  thread.ackMessage(id)\n\n  const sentMessageID = body.req_msg_id\n  const sentMessage = Config.fastCache.get(uid, dc).getSent(sentMessageID)\n\n  // thread.processMessageAck(sentMessageID)\n  if (!sentMessage) {\n    console.warn('No sent message!', sentMessageID, message)\n    return emptyPatch()\n  }\n  dispatch(NETWORKER_STATE.SENT.DEL([sentMessage], dc), uid)\n  Config.fastCache.get(uid, dc).deleteSent(sentMessage)\n  if (body.result) {\n    if (body.result._ == 'rpc_error') {\n      thread.emit('rpc-error', {\n        threadID   : thread.threadID,\n        networkerDC: dc,\n        error      : body.result,\n        sentMessage,\n        message\n      })\n\n    } else {\n      thread.emit('rpc-result', {\n        threadID   : thread.threadID,\n        networkerDC: dc,\n        message,\n        sentMessage,\n        result     : body.result\n      })\n    }\n  } else {\n    console.warn('No result!', sentMessageID, message)\n  }\n  if (sentMessage.isAPI)\n    thread.connectionInited = true\n  return emptyPatch()\n}\n"]}