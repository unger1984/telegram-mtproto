{"version":3,"sources":["../../../src/service/main/index.js"],"names":["EventEmitter","ApiManager","registerInstance","Logger","log","streamBus","scopedEmitter","dispatch","emitter","MAIN","loadStorage","init","MTProto","constructor","config","wildcard","on","bind","emit","defaultDC","activated","uid","fullConfig","dcMap","storage","layer","rootEmitter","schema","apiSchema","mtSchema","apiConfig","api","data","rest","length","bus","INIT","load","setTimeout"],"mappings":";;AAEA,OAAOA,YAAP;AAKA;;AAEA,SAASC,UAAT,QAA2B,gBAA3B;AACA,SAASC,gBAAT;AACA;;AAEA,OAAOC,MAAP;AACA,IAAMC,MAAMD,MAAO,MAAnB;;AAEA,OAAOE,SAAP,MAAoC,wBAApC;AACA,SAASC,aAAT,QAA8B,aAA9B;AACA,OAAmD,WAAnD;AACA,SAASC,QAAT;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,IAAT;AACA,OAAOC,WAAP,MAAwB,gBAAxB;AACA,SAASC,IAAT,QAAqB,QAArB;;AAEA,MAAMC,OAAN,CAAc;AAUZ;AAKAC,cAAYC,MAAZ,EAAgC;AAAA;;AAAA,SAZhCN,OAYgC,GAZW,IAAIR,YAAJ,CAAiB;AAC1De,gBAAU;AADgD,KAAjB,CAYX;AAAA,SARhCC,EAQgC,GARvB,KAAKR,OAAL,CAAaQ,EAAb,CAAgBC,IAAhB,CAAqB,KAAKT,OAA1B,CAQuB;AAAA,SAPhCU,IAOgC,GAPnB,KAAKV,OAAL,CAAaU,IAAb,CAAkBD,IAAlB,CAAuB,KAAKT,OAA5B,CAOmB;AAAA,SAJhCW,SAIgC,GAJZ,CAIY;AAAA,SADhCC,SACgC,GADX,IACW;;AAC9BZ,YAAQU,IAAR,CAAa,SAAb;AACA,QAAM;AACJG,SADI;AAEJC,gBAFI;AAGJC,WAHI;AAIJC,aAJI;AAKJC;AALI,QAMFd,KAAKG,MAAL,CANJ;AAOA,SAAKA,MAAL,GAAcQ,UAAd;AACA,SAAKD,GAAL,GAAWA,GAAX;AACAnB,qBAAiB;AACfmB,SADe;AAEfH,YAAa,KAAKA,IAFH;AAGfQ,mBAAapB,cAAce,GAAd,EAAmB,KAAKb,OAAxB,CAHE;AAIfmB,cAAa;AACXC,mBAAWN,WAAWK,MADX;AAEXE,kBAAWP,WAAWO;AAFX,OAJE;AAQfC,iBAAWR,WAAWS,GARP;AASfP,aATe;AAUfC,WAVe;AAWfF;AAXe,KAAjB;AAaA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKhB,OAAL,CAAaQ,EAAb,CAAgB,GAAhB,EAAqB,CAACgB,IAAD,EAAO,GAAGC,IAAV,KAAmB;AACtC7B,UAAI,OAAJ,EAAa4B,IAAb;AACA,UAAIC,KAAKC,MAAL,GAAc,CAAlB,EACE9B,IAAI,OAAJ,EAAa,MAAb,EAAqB6B,IAArB;AACH,KAJD;AAKA,SAAKzB,OAAL,CAAaQ,EAAb,CAAgB,YAAhB,EAA8B,MAAM;AAClC,WAAKI,SAAL,GAAiB,KAAjB;AACD,KAFD;AAGA,SAAKW,GAAL,GAAW,IAAI9B,UAAJ,CAAeqB,UAAf,EAA2BD,GAA3B,CAAX;AACA,SAAKc,GAAL,GAAW9B,UAAU,IAAV,CAAX;AACAE,aAASE,KAAK2B,IAAL,CAAU;AACjBf;AADiB,KAAV,CAAT,EAEIA,GAFJ;AAGA,QAAMgB;AAAA,mCAAO,aAAW;AACtB,YAAI,MAAKjB,SAAT,EACE,MAAMV,YAAYa,KAAZ,EAAmBF,GAAnB,CAAN;AACH,OAHK;;AAAA;AAAA;AAAA;AAAA,QAAN;AAIA,SAAKgB,IAAL,GAAYA,IAAZ;AACAC,eAAWD,IAAX,EAAiB,GAAjB;AACD;AA3DW;;AA8Dd,eAAezB,OAAf","file":"index.js","sourcesContent":["//@flow\n\nimport EventEmitter, {\n  type EventEmitterType,\n  type Emit,\n  type On,\n} from 'eventemitter2'\nimport { type AsyncStorage } from 'mtproto-shared'\n\nimport { ApiManager } from '../api-manager'\nimport { registerInstance } from 'ConfigProvider'\nimport { type UID } from 'Newtype'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`main`\n\nimport streamBus, { type Bus } from '../../event/stream-bus'\nimport { scopedEmitter } from '../../event'\nimport { type ConfigType, type StrictConfig } from './index.h'\nimport { dispatch } from 'State'\nimport { emitter } from '../../state/portal'\nimport { MAIN } from 'Action/main'\nimport loadStorage from './load-storage'\nimport { init } from './init'\n\nclass MTProto {\n  config: StrictConfig\n  uid: UID\n  emitter: EventEmitterType & EventEmitter = new EventEmitter({\n    wildcard: true\n  })\n  api: ApiManager\n  on: On = this.emitter.on.bind(this.emitter)\n  emit: Emit = this.emitter.emit.bind(this.emitter)\n  storage: AsyncStorage\n  // state = new State\n  defaultDC: number = 2\n  bus: Bus\n  load: () => Promise<void>\n  activated: boolean = true\n  constructor(config: ConfigType) {\n    emitter.emit('cleanup')\n    const {\n      uid,\n      fullConfig,\n      dcMap,\n      storage,\n      layer,\n    } = init(config)\n    this.config = fullConfig\n    this.uid = uid\n    registerInstance({\n      uid,\n      emit       : this.emit,\n      rootEmitter: scopedEmitter(uid, this.emitter),\n      schema     : {\n        apiSchema: fullConfig.schema,\n        mtSchema : fullConfig.mtSchema\n      },\n      apiConfig: fullConfig.api,\n      storage,\n      layer,\n      dcMap\n    })\n    this.storage = storage\n    this.emitter.on('*', (data, ...rest) => {\n      log('event')(data)\n      if (rest.length > 0)\n        log('event', 'rest')(rest)\n    })\n    this.emitter.on('deactivate', () => {\n      this.activated = false\n    })\n    this.api = new ApiManager(fullConfig, uid)\n    this.bus = streamBus(this)\n    dispatch(MAIN.INIT({\n      uid,\n    }), uid)\n    const load = async() => {\n      if (this.activated)\n        await loadStorage(dcMap, uid)\n    }\n    this.load = load\n    setTimeout(load, 1e3)\n  }\n}\n\nexport default MTProto\n\nexport type { MTProto }\n"]}