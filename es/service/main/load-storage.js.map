{"version":3,"sources":["../../../src/service/main/load-storage.js"],"names":["trim","fromPairs","Config","dispatch","random","MAIN","bytesFromHex","Thread","toDCInt","toDCNumber","dcMap","uid","iAuth","iSalt","iHome","flags","networker","auth","homeDC","net","ids","authList","authKey","salt","session","getter","storageAdapter","get","keys","dc","dcInt","inactive","fields","then","val","fold","x","Array","isArray","saltKey","getDefaultSalt","Set","nearest","nearestDC","createSessions","getDcList","finalAction","home","STORAGE_IMPORTED","loadStorage","dcList","concat","Object","filter","isFinite","map","e","parseInt"],"mappings":"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","file":"load-storage.js","sourcesContent":["//@flow\n\nimport { trim, fromPairs } from 'ramda'\n\n// import dcStoreKeys from 'Util/dc-store-keys'\nimport Config from 'ConfigProvider'\n\nimport { dispatch } from 'State'\nimport random from '../secure-random'\nimport { MAIN } from 'Action'\nimport { bytesFromHex } from 'Bin'\nimport Thread from '../networker'\n\nimport {\n  type DCInt,\n  type ACAuth,\n  type ACFlags,\n  type ACNetworker,\n  toDCInt,\n} from '../../state/carrier'\n\nimport {\n  type DCNumber,\n  type UID,\n  toDCNumber\n} from 'Newtype'\n\nexport default async function loadStorage(\n  dcMap: Map<DCNumber, string>,\n  uid: UID,\n) {\n  let iAuth: { [dc: number]: number[] } = {}\n  let iSalt: { [dc: number]: number[] } = {}\n  let iHome = 2\n  let flags: ACFlags = {\n    networker: false,\n    auth     : false,\n    homeDC   : false,\n    net      : false,\n  }\n  let networker: ACNetworker = {\n    ids: [],\n  }\n  let authList: ACAuth = {\n    authKey: [],\n    salt   : [],\n    session: [],\n  }\n\n  const getter = Config.storageAdapter.get\n\n  for (const dc of dcMap.keys()) {\n    // flags = { ...flags, networker: true }\n    const dcInt: DCInt = toDCInt(dc)\n    let inactive = true\n    let fields: {\n      authKey: number[],\n      salt: number[],\n      session: number[],\n    } = {\n      authKey: [],\n      salt   : [],\n      session: [],\n    }\n    const salt = await getter\n      .salt(uid, dc)\n      .then(val => val.fold(() => false, x => x))\n    // const salt = checkString(saltRaw)\n    if (Array.isArray(salt)) {\n      iSalt = { ...iSalt, [dc | 0]: salt }\n\n      inactive = false\n      flags = {\n        ...flags,\n        networker: true,\n        auth     : true,\n      }\n      fields = {\n        ...fields,\n        salt,\n      }\n      authList = {\n        ...authList,\n        salt: [ ...authList.salt, dcInt ]\n      }\n    }\n    const auth = await getter\n      .authKey(uid, dc)\n      .then(val => val.fold(() => false, x => x))\n    if (Array.isArray(auth)) {\n      iAuth = { ...iAuth, [dc | 0]: auth }\n\n      const saltKey = Array.isArray(salt)\n        ? salt\n        : getDefaultSalt()\n\n      iSalt = { ...iSalt, [dc | 0]: saltKey }\n\n      inactive = false\n      flags = {\n        ...flags,\n        networker: true,\n        auth     : true,\n      }\n      new Thread(\n        dc,\n        uid\n      )\n      fields = {\n        ...fields,\n        salt   : saltKey,\n        authKey: auth,\n      }\n      authList = {\n        ...authList,\n        salt   : [ ...new Set([ ...authList.salt, dcInt ]) ],\n        authKey: [ ...authList.authKey, dcInt ]\n      }\n    }\n    if (!inactive)\n      networker = {\n        ...networker,\n        ids : [ ...networker.ids, dcInt ],\n        [dc | 0]: fields,\n      }\n  }\n  //$off\n  const nearest = await getter\n    .nearestDC(uid)\n    .then(val => val\n      /*:: .map(toDCNumber) */\n      .fold(() => false, x => x))\n  if (nearest !== false) {\n    iHome = nearest\n    flags = { ...flags, homeDC: true }\n    // dispatch(MAIN.DC_DETECTED(nearest))\n  } //else\n  // dispatch(MAIN.MODULE_LOADED())\n  // dispatch(MAIN.DC_DETECTED(2))\n  const session = createSessions(getDcList(iAuth, iSalt, iHome))\n  const finalAction = {\n    auth: iAuth,\n    salt: iSalt,\n    home: iHome,\n    uid,\n    session,\n  }\n  dispatch(MAIN.STORAGE_IMPORTED(finalAction), uid)\n  if (__DEV__)\n    console.log({ salt: iSalt, home: iHome, session })\n}\n\nconst getDefaultSalt = () => bytesFromHex('AAAAAAAAAAAAAAAA')\n\nfunction getDcList(auth, salt, home) {\n  const dcList = []\n    .concat(\n      Object.keys(auth),\n      Object.keys(salt),\n      [home],\n    )\n    .filter(isFinite)\n    .map(e => parseInt(e, 10))\n  return [...new Set(dcList)]\n}\n\n//$off\nconst createSessions = (dcList: number[]): { [dc: number]: number[] } =>\n  fromPairs(\n    dcList\n      .map(dc => [dc, random(new Array(8))])\n  )\n"]}