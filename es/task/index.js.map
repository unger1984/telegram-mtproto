{"version":3,"sources":["../../src/task/index.js"],"names":["pipe","map","encaseP","of","reject","isApiObject","parser","processing","queryKeys","MaybeT","Config","mergePatch","Logger","log","normalize","ctx","flattenRaw","flattenMessage","processed","decrypt","result","data","dc","uid","input","session","get","keys","toFuture","ERR","noKeys","chain","decryptor","validateDecrypt","decrypted","thread","authID","auth","rest","responseBuffer","authKeyID","authKey","thisSessionID","prevSessionID","getMsgById","response","invalidResponse","messageID","seqNo","sessionID","message","net","checkContainer","isContainer","flattenContainer","type","id","seq","raw","Array","isArray","messages","container","ids","msg_id","cont","normalizedMsgs","msg","seqno","NoSessionKeys","Error","InvalidResponse"],"mappings":"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","file":"index.js","sourcesContent":["//@flow\n\nimport { pipe, map } from 'ramda'\nimport { encaseP, of, reject } from 'fluture'\n\nimport {\n  type PUnitList,\n\n  type RawInput,\n  type RawMessage,\n  type RawContainer,\n  type RawObject,\n  type MessageDraft,\n  type IncomingType,\n  type SystemMessage,\n  type MessageUnit,\n\n  type ᐸPatchᐳSummaryReduced,\n} from './index.h'\nimport { isApiObject } from './fixtures'\nimport parser from '../service/chain'\nimport processing from './processing'\n// import { dispatch } from 'State'\n// import { MAIN } from 'Action'\nimport { queryKeys } from '../state/query'\nimport { MaybeT } from 'Monad'\nimport Config from 'ConfigProvider'\n\nimport mergePatch from './merge-patch'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`task-index`\n\n/*::\ndeclare var inp: RawInput\ndeclare function wait<T>(data: Promise<T>): T\nconst decryptedData = wait(decrypt(inp).promise())\n\ntype NormalizeInput = typeof decryptedData\n*/\n\nexport default function normalize(ctx: NormalizeInput) {\n  const flattenRaw = flattenMessage(ctx)\n  const processed = processing(ctx, flattenRaw)\n  return { ...mergePatch(ctx, processed), ...ctx }\n}\n\n\n\nexport function decrypt({ result: { data }, dc, uid, ...input }: RawInput) {\n  const session = Config.session.get(uid, dc)\n  const keys = MaybeT.toFuture(\n    ERR.noKeys,\n    queryKeys(uid, dc)\n  )\n  return keys\n    .map(keys => ({ ...input, data, dc, uid, ...keys, session }))\n    .chain(decryptor)\n    .chain(validateDecrypt)\n    .map(decrypted => ({ ...input, dc, uid, ...decrypted }))\n}\n\nconst decryptor = ({ thread, data, uid, dc, authID, auth, session, ...rest }) =>\n  encaseP(parser, {\n    responseBuffer: data,\n    uid,\n    dc,\n    authKeyID     : authID,\n    authKey       : auth,\n    thisSessionID : session,\n    prevSessionID : thread.prevSessionID,\n    getMsgById    : thread.getMsgById,\n  })\n  .map(result => ({ ...result, thread, uid, dc, authID, auth, session, ...rest }))\n\nfunction validateDecrypt(decrypted) {\n  const { response } = decrypted\n  if (!isApiObject(response)) {\n    return reject(ERR.invalidResponse())\n  }\n  return of(decrypted)//{ ...input, ...decrypted }\n}\n\nfunction flattenMessage(input): MessageDraft[] {\n  const { messageID, seqNo, sessionID, message, response, net, thread: { uid } } = input\n  const result = checkContainer(response)\n  if (result.isContainer) return flattenContainer(input, result.data)\n  else return [{\n    type   : 'object',\n    uid,\n    id     : messageID,\n    seq    : seqNo,\n    session: sessionID,\n    dc     : message.dc,\n    raw    : result.data\n  }]\n}\n\nfunction checkContainer(response: RawMessage) {\n  if (Array.isArray(response.messages)) {\n    //$FlowIssue\n    const container: RawContainer = response\n    const result: {\n      isContainer: true,\n      data: RawContainer,\n    } = {\n      isContainer: true,\n      data       : container,\n    }\n    return result\n  } else {\n    const data: RawObject = response\n    const result: {\n      isContainer: false,\n      data: RawObject,\n    } = {\n      isContainer: false,\n      data,\n    }\n    return result\n  }\n}\n\nfunction flattenContainer(input, container: RawContainer): MessageDraft[] {\n  const { messages } = container\n  const ids = messages.map(({ msg_id }) => msg_id)\n  const session = Config.session.get(input.thread.uid, input.dc)\n  if (__DEV__)\n    console.log(`input.sessionID`, input.sessionID)\n  if (__DEV__)\n    console.log(`real session`, session)\n  const cont: MessageDraft = {\n    type: 'container',\n    id  : input.messageID,\n    seq : input.seqNo,\n    session,\n    dc  : input.message.dc,\n    raw : ids,\n  }\n  const normalizedMsgs: MessageDraft[] = messages.map(msg => ({\n    type: 'inner',\n    id  : msg.msg_id,\n    seq : msg.seqno,\n    session,\n    dc  : input.message.dc,\n    raw : msg,\n  }))\n  return [...normalizedMsgs, cont]\n}\n\nclass NoSessionKeys extends Error {  }\nclass InvalidResponse extends Error {  }\nconst ERR = {\n  noKeys: () => new NoSessionKeys('No session keys'),\n  invalidResponse: () => new InvalidResponse('Invalid decrypted response'),\n}\n"]}