{"version":3,"sources":["../../src/task/merge-patch.js"],"names":["mergeWith","concat","append","groupBy","pipe","map","last","filter","fromPairs","contains","singleHandler","Logger","log","mergePatch","ctx","processed","message","summary","reduce","acc","msg","mergedSummary","mergeSummary","emptySummary","regrouped","regroupSummary","noAuth","dcWithoutAuth","auth","salt","session","omitSalt","updatedSalt","updatedSession","withNewSalt","joinedAuth","joinDcAuth","normalized","processAck","ack","home","reqResend","resend","lastMessages","groupAndExtract","fn","dc","groupDcIds","e","id","groupAuthKey","authKey","groupSalt","groupSession","reduceToLast","empty","toDcs","obj","Object","keys","isFinite","parseInt","authKeys","saltKeys","sessionKeys","usedDcs","Set","emptyDcAuth","result","dcAuth","hasDc"],"mappings":"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","file":"merge-patch.js","sourcesContent":["//@flow\n// import { join } from 'path'\n// import { outputJsonSync } from 'fs-extra'\n\nimport { mergeWith, concat, append, groupBy, pipe, map, last, filter, fromPairs, contains } from 'ramda'\n\nimport {\n  type MessageUnit,\n\n  type ᐸPatchᐳSummary,\n  type ᐸPatchᐳMessage,\n  type ᐸPatchᐳAuthKey,\n  type ᐸPatchᐳSalt,\n  type ᐸPatchᐳSession,\n  type ᐸPatchᐳSummaryReduced,\n\n  type DcAuth\n} from './index.h'\n\nimport singleHandler from './single-handler'\n\nimport Logger from 'mtproto-logger'\nconst log = Logger`merge-patch`\n\n// const testID = String((Date.now() - ((Date.now() / 1e8) | 0) * 1e8) / 1e3 | 0)\n\n// let event = 0\n// const eventId = () => String( ++event )\n//\n// const LOG_PATH = [process.cwd(), 'logs', testID]\n\nexport default function mergePatch(ctx: *, processed: MessageUnit[]) {\n  const { message, summary } = processed\n    .reduce((acc, msg) => {\n      const { message, summary } = singleHandler(ctx, msg)\n      // const file = join(...LOG_PATH, eventId() + '.json')\n      // outputJsonSync(file, { message, summary }, { spaces: 2 })\n      return {\n        message: append(message, acc.message),\n        summary: append(summary, acc.summary),\n      }\n    }, { message: [], summary: [] })\n  const mergedSummary = summary.reduce(mergeSummary, emptySummary())\n  const regrouped = regroupSummary(mergedSummary)\n  const noAuth = dcWithoutAuth(regrouped.auth)\n  const { salt, session, ...omitSalt } = regrouped\n  const updatedSalt: { [dc: number]: number[] | false } = { ...salt, ...noAuth }\n  const updatedSession: { [dc: number]: ᐸPatchᐳSession | false } = { ...session, ...noAuth }\n  const withNewSalt: ᐸPatchᐳSummaryReduced = {\n    ...omitSalt,\n    salt   : updatedSalt,\n    session: updatedSession,\n  }\n  const joinedAuth = joinDcAuth(withNewSalt)\n  // log`mergedSummary`(mergedSummary)\n  log`regrouped`(withNewSalt)\n  log`joinedAuth`(joinedAuth)\n  return {\n    normalized: message,\n    summary   : withNewSalt,\n  }\n}\n\n\nconst emptySummary = (): ᐸPatchᐳSummary => ({\n  processAck  : [],\n  ack         : [],\n  home        : [],\n  auth        : [],\n  reqResend   : [],\n  resend      : [],\n  lastMessages: [],\n  salt        : [],\n  session     : [],\n})\n\ntype MergeSummary = (acc: ᐸPatchᐳSummary, val: ᐸPatchᐳSummary) => ᐸPatchᐳSummary\n//$off\nconst mergeSummary: MergeSummary = mergeWith(concat)\n\n//$off\ntype GroupAndExtract/*:: <-T, S>*/ = (list: $ReadOnlyArray<T>) => { [dc: number]: S[] }\nconst groupAndExtract = /*:: <T, S>*/(fn: (x: T) => S): GroupAndExtract<T, S> => pipe(\n  groupBy(({ dc }: { dc: number }) => /*::(*/dc/*:: : $FlowIssue)*/),\n  map(map(fn))\n)\n\nconst groupDcIds: GroupAndExtract<ᐸPatchᐳMessage, string> = groupAndExtract(e => e.id)\nconst groupAuthKey: GroupAndExtract<ᐸPatchᐳAuthKey, number[] | false> = groupAndExtract(e => e.authKey)\nconst groupSalt: GroupAndExtract<ᐸPatchᐳSalt, number[]> = groupAndExtract(e => e.salt)\nconst groupSession: GroupAndExtract<ᐸPatchᐳSession, ᐸPatchᐳSession> = groupAndExtract(e => e)\n\nfunction regroupSummary(summary: ᐸPatchᐳSummary) {\n  const {\n    processAck,\n    ack,\n    home,\n    auth,\n    reqResend,\n    resend,\n    lastMessages,\n    salt,\n    session,\n  } = summary\n\n  const regrouped = {\n    processAck  : groupDcIds(processAck),\n    ack         : groupDcIds(ack),\n    home,\n    auth        : reduceToLast(groupAuthKey(auth)),\n    reqResend   : groupDcIds(reqResend),\n    resend      : groupDcIds(resend),\n    lastMessages: groupDcIds(lastMessages),\n    salt        : reduceToLast(groupSalt(salt)),\n    session     : reduceToLast(groupSession(session)),\n  }\n\n  return regrouped\n}\n\n\ntype ReduceToLast = <T>(dcMap: { [dc: number]: T[] }) => { [dc: number]: T }\n//$off\nconst reduceToLast: ReduceToLast = map(last)\n\n//$off\ntype DcWithoutAuth = (auth: { [dc: number]: number[] | false }) =>\n  { [dc: number]: false }\nconst dcWithoutAuth: DcWithoutAuth = filter(e => e === false)\n\n\nconst empty: any = {}\nconst toDcs = obj => Object\n  .keys(obj)\n  .filter(isFinite)\n  .map(e => parseInt(e, 10))\n\nfunction joinDcAuth(summary) {\n  /*::\n  type AuthMap = typeof summary.auth\n  type SaltMap = typeof summary.salt\n  type SessionMap = typeof summary.session\n  */\n  const emptyAuth: AuthMap = empty\n  const emptySalt: SaltMap = empty\n  const emptySession: SessionMap = empty\n  const {\n    auth = emptyAuth,\n    salt = emptySalt,\n    session = emptySession,\n  } = summary\n  const authKeys = toDcs(auth)\n  const saltKeys = toDcs(salt)\n  const sessionKeys = toDcs(session)\n  const usedDcs = [...new Set([...authKeys, ...saltKeys, ...sessionKeys])]\n  const emptyDcAuth: DcAuth = /*::(*/{}/*:: : any)*/\n  let result: {\n    //$off\n    [dc: number]: DcAuth\n  } = fromPairs(usedDcs.map(e => [e, emptyDcAuth]))\n  for (const dc of usedDcs) {\n    let dcAuth = result[dc]\n    const hasDc = contains(dc)\n    if (hasDc(authKeys))\n      dcAuth = { ...dcAuth, auth: auth[dc] }\n    if (hasDc(saltKeys))\n      dcAuth = { ...dcAuth, salt: salt[dc] }\n    if (hasDc(sessionKeys))\n      dcAuth = { ...dcAuth, session: session[dc] }\n    result = { ...result, [dc]: dcAuth }\n  }\n  return result\n}\n"]}